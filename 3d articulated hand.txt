#include <SDL2/SDL.h>
#include <GL\glut.h>

#include <cstdlib>
#define LARGEUR_BASE 50
#define HAUTEUR_BASE 20
#define LARGEUR_BRAS_1 150
#define HAUTEUR_BRAS_1 15
#define LARGEUR_BRAS_2 50
#define HAUTEUR_BRAS_2 10
#define TAILLE_CAISSE 10
#define LARGEUR_ECRAN (LARGEUR_BASE + LARGEUR_BRAS_1 + HAUTEUR_BRAS_2 + 50)
#define HAUTEUR_ECRAN (HAUTEUR_BASE + LARGEUR_BRAS_1 + HAUTEUR_BRAS_2 + 50)
int angle1 = 0;
int angle2 = -20;
int	angle3 = 10;
int longueur = 50;
float angleX = 0;
float angleZ = 0;
float angleY = 0;
int current_time = 0;
int deltaTime = 0;
int last_time = 0;
float anglePhalange1 = 0;	//> 0 < 90
float anglePhalange2 = 0;
float anglePhalange3 = 0;

void Dessiner(SDL_Window*& window);

int main(int argc, char *argv[])
{
	SDL_Event event;
	SDL_Init(SDL_INIT_VIDEO);
	atexit(SDL_Quit);
	SDL_Window *window = SDL_CreateWindow("SDL2/OpenGL Demo", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);

	// Create an OpenGL context associated with the window.
	SDL_GLContext glContext = SDL_GL_CreateContext(window);
	glutInitDisplayMode(GLUT_RGBA | GLUT_SINGLE | GLUT_ALPHA | GLUT_DEPTH|GLUT_STENCIL);
	glMatrixMode( GL_PROJECTION );
	glLoadIdentity( );
	gluPerspective(70,(double)LARGEUR_ECRAN/HAUTEUR_ECRAN, 1, 1000);
	//gluOrtho2D(0,LARGEUR_ECRAN,0,HAUTEUR_ECRAN);
	glEnable(GL_DEPTH_TEST);

	Dessiner(window);

	bool continued = true;
	while (continued)
	{
		current_time = SDL_GetTicks();
		deltaTime= current_time - last_time;
		last_time = current_time;

		while(SDL_WaitEvent(&event))
		{
			switch(event.type)
			{
				case SDL_QUIT:
				exit(0);
				break;
				case SDL_KEYDOWN:
				switch (event.key.keysym.sym)
				{
					case SDLK_UP:		angleX += 0.0025 * deltaTime;	break;
					case SDLK_DOWN :	angleX -= 0.0025 * deltaTime;	break;

					case SDLK_RIGHT :	
					if (((event.key.keysym.mod & KMOD_LSHIFT) == KMOD_LSHIFT))	angleY -= 0.0045 * deltaTime;
					else														angleZ += 0.0045 * deltaTime;	break;

					case SDLK_LEFT :
					if (((event.key.keysym.mod & KMOD_LSHIFT) == KMOD_LSHIFT))	angleY += 0.0045 * deltaTime;
					else														angleZ -= 0.0045 * deltaTime;	break;

					case SDLK_a	:	if (anglePhalange1 < 90)			anglePhalange1 += 0.0045 * deltaTime;	break;
					case SDLK_z	:	if (anglePhalange2 < 90)			anglePhalange2 += 0.0045 * deltaTime;	break;
					case SDLK_e	:	if (anglePhalange3 < 90)			anglePhalange3 += 0.0045 * deltaTime;	break;

					case SDLK_q	:	if (anglePhalange1 > 0)				anglePhalange1 -= 0.0045 * deltaTime;	break;
					case SDLK_s	:	if (anglePhalange2 > 0)				anglePhalange2 -= 0.0045 * deltaTime;	break;
					case SDLK_d	:	if (anglePhalange3 > 0)				anglePhalange3 -= 0.0045 * deltaTime;	break;
				}
			}
			Dessiner(window);
		}
	}
	return 0;
}

void	createCube(float scale = 1.0f, float scaleX = 1.0f, float scaleY = 1.0f, float scaleZ = 1.0f)	//X = width, Y = length, Z = height
{
	glBegin(GL_QUADS);
		glColor3ub(255, 0, 0); //face rouge
		glVertex3d(scaleX * scale  , scaleY * scale  , scaleZ * scale);
		glVertex3d(scaleX * scale  , scaleY * scale  , -scaleZ * scale);
		glVertex3d(-scaleX * scale  , scaleY * scale  , -scaleZ * scale);
		glVertex3d(-scaleX * scale  , scaleY * scale  , scaleZ * scale);

		glColor3ub(0, 255, 0); //face verte
		glVertex3d(scaleX * scale  , -scaleY * scale  , scaleZ * scale);
		glVertex3d(scaleX * scale  , -scaleY * scale  , -scaleZ * scale);
		glVertex3d(scaleX * scale  , scaleY * scale  , -scaleZ * scale);
		glVertex3d(scaleX * scale  , scaleY * scale  , scaleZ * scale);

		glColor3ub(0, 0, 255); //face bleue
		glVertex3d(-scaleX * scale  , -scaleY * scale  , scaleZ * scale);
		glVertex3d(-scaleX * scale  , -scaleY * scale  , -scaleZ * scale);
		glVertex3d(scaleX * scale  , -scaleY * scale  , -scaleZ * scale);
		glVertex3d(scaleX * scale  , -scaleY * scale  , scaleZ * scale);

		glColor3ub(255, 255, 0); //face jaune
		glVertex3d(-scaleX * scale  , scaleY * scale  , scaleZ * scale);
		glVertex3d(-scaleX * scale  , scaleY * scale  , -scaleZ * scale);
		glVertex3d(-scaleX * scale  , -scaleY * scale  , -scaleZ * scale);
		glVertex3d(-scaleX * scale  , -scaleY * scale  , scaleZ * scale);

		glColor3ub(0, 255, 255); //face cyan
		glVertex3d(scaleX * scale  , scaleY * scale  , -scaleZ * scale);
		glVertex3d(scaleX * scale  , -scaleY * scale  , -scaleZ * scale);
		glVertex3d(-scaleX * scale  , -scaleY * scale  , -scaleZ * scale);
		glVertex3d(-scaleX * scale  , scaleY * scale  , -scaleZ * scale);

		glColor3ub(255, 0, 255); //face magenta
		glVertex3d(scaleX * scale  , -scaleY * scale  , scaleZ * scale);
		glVertex3d(scaleX * scale  , scaleY * scale  , scaleZ * scale);
		glVertex3d(-scaleX * scale  , scaleY * scale  , scaleZ * scale);
		glVertex3d(-scaleX * scale  , -scaleY * scale  , scaleZ * scale);
	glEnd();
}


void Dessiner(SDL_Window*& window)
{
	glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity( );

	gluLookAt(3,4,2,0,0,0,0,0,1);

	glRotatef(angleZ, 0, 0, 1);
	glRotatef(angleY, 0, 1, 0);
	glRotatef(angleX, 1, 0, 0);

	//tronc
	createCube(1, 0.7, 0.3);
	

	glTranslatef(0.7 - 0.13, 0, 1.3);
	glRotatef(anglePhalange1, 1, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);

	glTranslatef(1.2, 0, 0.6);
	glRotatef(anglePhalange2, 1, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);

	glTranslatef(1.2, 0, 0.6);
	glRotatef(anglePhalange3, 1, 0, 0);
	//createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);
	glTranslatef(-0.30f, 0, 0);
	createCube(1, 0.13, 0.2, 0.3);

	glFlush();
	SDL_GL_SwapWindow(window);
}
/*
void		handleEvent(bool& continuer, SDL_Event& ev)
{
	SDL_WaitEvent(&ev);
	switch(ev.type)
	{
		case SDL_QUIT:
			continuer = false;
	}
}

void		draw(SDL_Window*& window )
{
	glClearColor(0, 0, 0, 1);
	glClear(GL_COLOR_BUFFER_BIT);

	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity( );

	glPushMatrix();
	glTranslatef(0.2f, 0.0f, 0.0f);
	glBegin(GL_POLYGON);
		glColor3ub(255, 0, 0);	glVertex2d(-0.75, -0.75);	//ub = unsigned bit
		glColor3ub(0, 255, 0);	glVertex2d(0, 0.75);
		glColor3ub(0, 0, 255);	glVertex2d(0.75, -0.75);
	glEnd();
	glPopMatrix();
	
	glBegin(GL_QUADS);
		glColor3ub(0,0,255);
		glVertex2d(-0.75,-0.75);
		glVertex2d(-0.75,0.75);
		glColor3ub(255,0,0);
		glVertex2d(0.75,0.75);
		glVertex2d(0.75,-0.75);
	glEnd();

	glFlush();
	SDL_GL_SwapWindow(window);
}

void		clean(SDL_GLContext& glContext)
{
	SDL_Quit();
	SDL_GL_DeleteContext(glContext);
}

int main(int argc, char *argv[])
{
	SDL_Init(SDL_INIT_EVERYTHING);
 
	SDL_GL_SetAttribute(SDL_GL_RED_SIZE,            0);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,          0);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,           0);
	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE,          0);
	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE,          24); //mettre 16 si ce ne fonctionne pas
	SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE,        8);
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER,        1);*/
 
    /*glEnable(GL_DEPTH_TEST);
    glClearDepth(1);
	// Window mode MUST include SDL_WINDOW_OPENGL for use with OpenGL.
	SDL_Window *window = SDL_CreateWindow("SDL2/OpenGL Demo", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);

	// Create an OpenGL context associated with the window.
	SDL_GLContext glContext = SDL_GL_CreateContext(window);
	glutInitDisplayMode(GLUT_RGBA | GLUT_SINGLE | GLUT_ALPHA | GLUT_DEPTH|GLUT_STENCIL);

	// now you can make GL calls.
	// Once finished with OpenGL functions, the SDL_GLContext can be deleted.

	bool continuer = true;
	SDL_Event ev;
	
	//update
	while (continuer)
	{
		handleEvent(continuer, ev);
		draw(window);
	}

	clean(glContext);

	return 0;
}*/